// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs          = require("fs");
var $$Array     = require("bs-platform/lib/js/array.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("bs-json/src/Json_decode.js");

function looksLikeUrl(str) {
  if (str.startsWith("http://")) {
    return /* true */1;
  } else {
    return +str.startsWith("https://");
  }
}

function parseUrl(url) {
  if (url.includes("github.com")) {
    var segments = url.split("/");
    var length = segments.length;
    if (length < 2) {
      Pervasives.failwith("What the hell kind of a URL is this: " + url);
    }
    return /* Github */[
            Caml_array.caml_array_get(segments, length - 2 | 0),
            Caml_array.caml_array_get(segments, length - 1 | 0)
          ];
  } else {
    return Pervasives.failwith("Unknown URL: " + url);
  }
}

function looksLikeGitHubPath(str) {
  return +(str.split("/").length === 2);
}

function parseGitHubPath(path) {
  var match = path.split("/");
  if (match.length !== 2) {
    return Pervasives.failwith("???");
  } else {
    var user = match[0];
    var repo = match[1];
    return /* Github */[
            user,
            repo
          ];
  }
}

function parse(str) {
  if (looksLikeUrl(str)) {
    return parseUrl(str);
  } else if (looksLikeGitHubPath(str)) {
    return parseGitHubPath(str);
  } else {
    return Pervasives.failwith("Fuck if I know what this is: " + str);
  }
}

function getPublished(sourceFilename) {
  return Json_decode.field("published", (function (param) {
                return Json_decode.array(Json_decode.string, param);
              }), JSON.parse(Fs.readFileSync(sourceFilename, "ascii")));
}

function getUnpublished(sourceFilename) {
  return $$Array.map(parse, Json_decode.field("unpublished", (function (param) {
                    return Json_decode.array(Json_decode.string, param);
                  }), JSON.parse(Fs.readFileSync(sourceFilename, "ascii"))));
}

exports.looksLikeUrl        = looksLikeUrl;
exports.parseUrl            = parseUrl;
exports.looksLikeGitHubPath = looksLikeGitHubPath;
exports.parseGitHubPath     = parseGitHubPath;
exports.parse               = parse;
exports.getPublished        = getPublished;
exports.getUnpublished      = getUnpublished;
/* fs Not a pure module */
