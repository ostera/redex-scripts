// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                = require("fs");
var Rebase            = require("reason-rebase/src/rebase.js");
var Resync            = require("refetch/src/Resync.js");
var Source            = require("./common/Source.js");
var Refetch           = require("refetch/src/Refetch.js");
var Manifest          = require("./common/Manifest.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Json_decode       = require("bs-json/src/Json_decode.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Refetch__Response = require("refetch/src/Refetch__Response.js");

require('isomorphic-fetch')
;

function getSources(sourceFilename) {
  return Json_decode.field("unpublished", (function (param) {
                return Json_decode.array(Json_decode.string, param);
              }), JSON.parse(Fs.readFileSync(sourceFilename, "ascii")));
}

function getReadme(source) {
  var url = "https://raw.githubusercontent.com/" + (String(source[0]) + ("/" + (String(source[1]) + "/master/README.md")));
  return Resync.Future[/* flatMap */9]((function (param) {
                if (param.tag) {
                  return Pervasives.failwith("failed to get README");
                } else {
                  return Refetch__Response.text(param[1]);
                }
              }), Refetch.get(url));
}

function getStats(source) {
  var url = "https://api.github.com/repos/" + (String(source[0]) + ("/" + (String(source[1]) + "")));
  return Resync.Future[/* map */8]((function (param) {
                return Json_decode.field("stargazers_count", Json_decode.$$int, param);
              }), Resync.Future[/* flatMap */9]((function (param) {
                    if (param.tag) {
                      return Pervasives.failwith("failed to get stats: " + param[0][/* reason */1]);
                    } else {
                      return Refetch__Response.json(param[1]);
                    }
                  }), Refetch.get(url)));
}

function getRepositoryUrl(param) {
  return "https://github.com/" + (String(param[0]) + ("/" + (String(param[1]) + "")));
}

function makePackage(source, manifest, readme, stars) {
  return {
          type: "unpublished",
          id: "unpublished/" + manifest[/* name */0],
          name: manifest[/* name */0],
          version: manifest[/* version */1],
          description: Rebase.Option[/* getOr */14]("", manifest[/* description */2]),
          author: Js_null_undefined.from_opt(manifest[/* author */3]),
          license: Js_null_undefined.from_opt(manifest[/* license */4]),
          keywords: Rebase.$$Array[/* map */2]((function (prim) {
                  return prim.toLowerCase();
                }), Rebase.Option[/* getOr */14](/* array */[], manifest[/* keywords */5])),
          readme: readme,
          analyzed: new Date(),
          updated: new Date(),
          stars: stars,
          score: 0,
          quality: 0,
          popularity: 0,
          maintenance: 0,
          homepageUrl: Js_null_undefined.from_opt(manifest[/* homepage */7]),
          repositoryUrl: getRepositoryUrl(source),
          npmUrl: null,
          issuesUrl: Js_null_undefined.from_opt(manifest[/* bugsUrl */9]),
          docsUrl: null
        };
}

Rebase.$$Array[/* forEach */8]((function (source) {
        return Resync.Future[/* whenCompleted */6]((function (param) {
                      if (param.tag) {
                        console.log("\n", source, "\n", param[0]);
                        return /* () */0;
                      } else {
                        var match = param[0];
                        var manifest = match[0];
                        var json = JSON.stringify(makePackage(source, manifest, match[1], match[2]));
                        Fs.writeFileSync("data/generated/packages/unpublished/" + (encodeURIComponent(manifest[/* name */0]) + ".json"), json, "utf8");
                        return /* () */0;
                      }
                    }), Resync.Future[/* flatMap */9]((function (param) {
                          var readme = param[1];
                          var manifest = param[0];
                          return Resync.Future[/* map */8]((function (stats) {
                                        return /* tuple */[
                                                manifest,
                                                readme,
                                                stats
                                              ];
                                      }), getStats(source));
                        }), Resync.Future[/* flatMap */9]((function (manifest) {
                              return Resync.Future[/* map */8]((function (readme) {
                                            return /* tuple */[
                                                    manifest,
                                                    readme
                                                  ];
                                          }), getReadme(source));
                            }), Manifest.get(source))));
      }), Rebase.$$Array[/* map */2](Source.parse, getSources("data/sources.json")));

exports.getSources       = getSources;
exports.getReadme        = getReadme;
exports.getStats         = getStats;
exports.getRepositoryUrl = getRepositoryUrl;
exports.makePackage      = makePackage;
/*  Not a pure module */
