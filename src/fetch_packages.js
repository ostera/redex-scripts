// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                = require("fs");
var Curry             = require("bs-platform/lib/js/curry.js");
var Rebase            = require("reason-rebase/src/rebase.js");
var Resync            = require("refetch/src/Resync.js");
var Refetch           = require("refetch/src/Refetch.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Json_decode       = require("bs-json/src/Json_decode.js");
var Json_encode       = require("bs-json/src/Json_encode.js");
var Refetch__Response = require("refetch/src/Refetch__Response.js");

require('isomorphic-fetch')
;

function decode(json) {
  return /* record */[
          /* analyzed */Json_decode.field("analyzedAt", (function (param) {
                  return Json_decode.map((function (prim) {
                                return new Date(prim);
                              }), Json_decode.string, param);
                }), json),
          /* name */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "name",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* version */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "version",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* description */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "description",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* updated */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "date",
                        /* [] */0
                      ]
                    ]
                  ], (function (param) {
                      return Json_decode.map((function (prim) {
                                    return new Date(prim);
                                  }), Json_decode.string, param);
                    })), json),
          /* author */Json_decode.oneOf(/* :: */[
                Json_decode.at(/* :: */[
                      "collected",
                      /* :: */[
                        "metadata",
                        /* :: */[
                          "author",
                          /* :: */[
                            "name",
                            /* [] */0
                          ]
                        ]
                      ]
                    ], Json_decode.string),
                /* :: */[
                  Json_decode.at(/* :: */[
                        "collected",
                        /* :: */[
                          "metadata",
                          /* :: */[
                            "publisher",
                            /* :: */[
                              "username",
                              /* [] */0
                            ]
                          ]
                        ]
                      ], Json_decode.string),
                  /* [] */0
                ]
              ], json),
          /* license */Json_decode.optional(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "license",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* readme */Json_decode.withDefault("", Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "readme",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* keywords */Json_decode.withDefault(/* array */[], Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "keywords",
                        /* [] */0
                      ]
                    ]
                  ], (function (param) {
                      return Json_decode.array(Json_decode.string, param);
                    })), json),
          /* stars */Json_decode.optional(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "github",
                      /* :: */[
                        "starsCount",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$int), json),
          /* downloads */Curry._1(Json_decode.at(/* :: */[
                    "evaluation",
                    /* :: */[
                      "popularity",
                      /* :: */[
                        "downloadsCount",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$float), json),
          /* score */Curry._1(Json_decode.at(/* :: */[
                    "score",
                    /* :: */[
                      "final",
                      /* [] */0
                    ]
                  ], Json_decode.$$float), json)
        ];
}

function get(packageName) {
  var escapedName = encodeURIComponent(packageName);
  var url = "https://api.npms.io/v2/package/" + (String(escapedName) + "");
  return Resync.Future[/* map */8](decode, Resync.Future[/* flatMap */9]((function (param) {
                    if (param.tag) {
                      var status = param[0];
                      return Resync.Future[/* map */8]((function (r) {
                                    return Pervasives.failwith("failed to get data from npms.io: " + (status[/* reason */1] + (", " + r)));
                                  }), Refetch__Response.text(param[1]));
                    } else {
                      return Refetch__Response.json(param[1]);
                    }
                  }), Refetch.get(url)));
}

var NPMS = /* module */[
  /* decode */decode,
  /* get */get
];

function encodePackage(data) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "name",
                data[/* name */1]
              ],
              /* :: */[
                /* tuple */[
                  "version",
                  data[/* version */2]
                ],
                /* :: */[
                  /* tuple */[
                    "description",
                    data[/* description */3]
                  ],
                  /* :: */[
                    /* tuple */[
                      "author",
                      data[/* author */5]
                    ],
                    /* :: */[
                      /* tuple */[
                        "license",
                        Json_encode.nullable((function (prim) {
                                return prim;
                              }), data[/* license */6])
                      ],
                      /* :: */[
                        /* tuple */[
                          "keywords",
                          data[/* keywords */8]
                        ],
                        /* :: */[
                          /* tuple */[
                            "readme",
                            data[/* readme */7]
                          ],
                          /* :: */[
                            /* tuple */[
                              "analyzed",
                              data[/* analyzed */0].toISOString()
                            ],
                            /* :: */[
                              /* tuple */[
                                "updated",
                                data[/* analyzed */0].toISOString()
                              ],
                              /* :: */[
                                /* tuple */[
                                  "stars",
                                  Json_encode.nullable((function (prim) {
                                          return prim;
                                        }), data[/* stars */9])
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "downloads",
                                    data[/* downloads */10]
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "score",
                                      data[/* score */11]
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function getPublished(sourceFilename) {
  return Json_decode.field("published", (function (param) {
                return Json_decode.array(Json_decode.string, param);
              }), JSON.parse(Fs.readFileSync(sourceFilename, "ascii")));
}

Rebase.$$Array[/* forEach */8]((function (source) {
        return Resync.Future[/* whenCompleted */6]((function (param) {
                      if (param.tag) {
                        console.log("\n", source, "\n", param[0]);
                        return /* () */0;
                      } else {
                        var data = param[0];
                        var json = JSON.stringify(encodePackage(data));
                        Fs.writeFileSync("data/generated/packages/" + (encodeURIComponent(data[/* name */1]) + ".json"), json, "utf8");
                        return /* () */0;
                      }
                    }), get(source));
      }), getPublished("data/sources.json"));

exports.NPMS          = NPMS;
exports.encodePackage = encodePackage;
exports.getPublished  = getPublished;
/*  Not a pure module */
