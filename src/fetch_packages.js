// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                = require("fs");
var $$Array           = require("bs-platform/lib/js/array.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var Rebase            = require("reason-rebase/src/rebase.js");
var Resync            = require("refetch/src/Resync.js");
var Refetch           = require("refetch/src/Refetch.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Json_decode       = require("bs-json/src/Json_decode.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Refetch__Response = require("refetch/src/Refetch__Response.js");

require('isomorphic-fetch')
;

function decode(json) {
  return /* record */[
          /* analyzed */Json_decode.field("analyzedAt", (function (param) {
                  return Json_decode.map((function (prim) {
                                return new Date(prim);
                              }), Json_decode.string, param);
                }), json),
          /* name */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "name",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* version */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "version",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* description */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "description",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* updated */Curry._1(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "date",
                        /* [] */0
                      ]
                    ]
                  ], (function (param) {
                      return Json_decode.map((function (prim) {
                                    return new Date(prim);
                                  }), Json_decode.string, param);
                    })), json),
          /* author */Json_decode.optional(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "author",
                        /* :: */[
                          "name",
                          /* [] */0
                        ]
                      ]
                    ]
                  ], Json_decode.string), json),
          /* license */Json_decode.optional(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "license",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* readme */Json_decode.withDefault("", Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "readme",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.string), json),
          /* keywords */Json_decode.withDefault(/* array */[], Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "metadata",
                      /* :: */[
                        "keywords",
                        /* [] */0
                      ]
                    ]
                  ], (function (param) {
                      return Json_decode.array(Json_decode.string, param);
                    })), json),
          /* stars */Json_decode.optional(Json_decode.at(/* :: */[
                    "collected",
                    /* :: */[
                      "github",
                      /* :: */[
                        "starsCount",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$int), json),
          /* downloads */Curry._1(Json_decode.at(/* :: */[
                    "evaluation",
                    /* :: */[
                      "popularity",
                      /* :: */[
                        "downloadsCount",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$float), json),
          /* score */Curry._1(Json_decode.at(/* :: */[
                    "score",
                    /* :: */[
                      "final",
                      /* [] */0
                    ]
                  ], Json_decode.$$float), json),
          /* quality */Curry._1(Json_decode.at(/* :: */[
                    "score",
                    /* :: */[
                      "detail",
                      /* :: */[
                        "quality",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$float), json),
          /* popularity */Curry._1(Json_decode.at(/* :: */[
                    "score",
                    /* :: */[
                      "detail",
                      /* :: */[
                        "popularity",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$float), json),
          /* maintenance */Curry._1(Json_decode.at(/* :: */[
                    "score",
                    /* :: */[
                      "detail",
                      /* :: */[
                        "maintenance",
                        /* [] */0
                      ]
                    ]
                  ], Json_decode.$$float), json)
        ];
}

function get(packageName) {
  var escapedName = encodeURIComponent(packageName);
  var url = "https://api.npms.io/v2/package/" + (String(escapedName) + "");
  return Resync.Future[/* map */8](decode, Resync.Future[/* flatMap */9]((function (param) {
                    if (param.tag) {
                      var status = param[0];
                      return Resync.Future[/* map */8]((function (r) {
                                    return Pervasives.failwith("failed to get data from npms.io: " + (status[/* reason */1] + (", " + r)));
                                  }), Refetch__Response.text(param[1]));
                    } else {
                      return Refetch__Response.json(param[1]);
                    }
                  }), Refetch.get(url)));
}

var NPMS = /* module */[
  /* decode */decode,
  /* get */get
];

function normalizeKeyword(keyword) {
  var keyword$1 = keyword.toLowerCase();
  if (keyword$1 === "reasonml") {
    return "reason";
  } else {
    return keyword$1;
  }
}

function makePackage(data) {
  return {
          type: "published",
          id: data[/* name */1],
          name: data[/* name */1],
          version: data[/* version */2],
          description: data[/* description */3],
          author: Js_null_undefined.from_opt(data[/* author */5]),
          license: Js_null_undefined.from_opt(data[/* license */6]),
          keywords: $$Array.map(normalizeKeyword, data[/* keywords */8]),
          readme: data[/* readme */7],
          analyzed: data[/* analyzed */0],
          updated: data[/* analyzed */0],
          stars: Js_null_undefined.from_opt(data[/* stars */9]),
          downloads: data[/* downloads */10],
          score: data[/* score */11],
          quality: data[/* quality */12],
          popularity: data[/* popularity */13],
          maintenance: data[/* maintenance */14]
        };
}

function getSources(sourceFilename) {
  return Json_decode.field("published", (function (param) {
                return Json_decode.array(Json_decode.string, param);
              }), JSON.parse(Fs.readFileSync(sourceFilename, "ascii")));
}

Rebase.$$Array[/* forEach */8]((function (source) {
        return Resync.Future[/* whenCompleted */6]((function (param) {
                      if (param.tag) {
                        console.log("\n", source, "\n", param[0]);
                        return /* () */0;
                      } else {
                        var data = param[0];
                        var json = JSON.stringify(makePackage(data));
                        Fs.writeFileSync("data/generated/packages/" + (encodeURIComponent(data[/* name */1]) + ".json"), json, "utf8");
                        return /* () */0;
                      }
                    }), get(source));
      }), getSources("data/sources.json"));

exports.NPMS             = NPMS;
exports.normalizeKeyword = normalizeKeyword;
exports.makePackage      = makePackage;
exports.getSources       = getSources;
/*  Not a pure module */
